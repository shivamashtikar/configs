#!/bin/bash


alias vim=nvim


# Check if /run/media/shivam/Data exists
if [ -d "/run/media/shivam/Data" ]; then
  export DATA=/run/media/shivam/Data
else
  export DATA=$HOME
fi

alias data='cd $DATA'
alias shrinkpdf='/home/shivam/.scripts/shrinkpdf.sh'
alias yl='youtube-dl --output "$HOME/Videos/%(title)s.%(ext)s" -f 18'

function ym(){
  youtube-dl --output $DATA/Music/"$2%(title)s.%(ext)s" \
   --extract-audio \
   --audio-format mp3 \
   --add-metadata -x $1
}
function cheat(){
	curl cheat.sh/$1
}

alias gog="git log  --abbrev-commit \
  --name-status --color --graph
  --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'"

function apy() {
 venv_name=$1
 activation_path=$PWD/$venv_name/bin/activate
 . $activation_path
}

alias dpy="deactivate"

alias activate_nix="sudo sysctl kernel.unprivileged_userns_clone=1"

function zshtheme(){
  sed -i "s/ZSH_THEME=.*/ZSH_THEME=\"${1}\"/g" $HOME/.zshrc
  source $HOME/.zshrc
}
alias hobby='cd $DATA/hobby'

alias f='ranger --choosedir=$HOME/.rangerdir; LASTDIR=`cat $HOME/.rangerdir`; cd "$LASTDIR"'
alias fz='nvim `find . | fzf --reverse --height=10`'

alias v='nvim'
alias :q='exit'

alias ws='cd $DATA/workspace'
alias wsu='cd $DATA/workspace/ui-team'
alias wsd='cd $DATA/workspace-data'


[ -f ~/.config/sec.sh ] && source $HOME/.config/sec.sh

# in order to sync packages, run this
# sudo pacman -Fy # <- only run this once
# following aliases will help in searching through packages and then installing it
alias pac_search="pacman -Slq | fzf -m --preview 'cat <(pacman -Si {1}) <(pacman -Fl {1} | awk \"{print \$2}\")' | xargs -ro sudo pacman -S"
alias yay_search="yay -Slq | fzf -m --preview 'cat <(yay -Si {1}) <(yay -Fl {1} | awk \"{print \$2}\")' | xargs -ro  yay -S"


# opens process list with fzf and kills selected process
function fkill() {
  pid=$(ps -ef | \
    sed 1d | \
    fzf -m --preview="ps -p {2}" --preview-window=down:3 | \
    awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    kill -"${1:-9}" "$pid"
  fi
}

# show proces running on port and kills selected process
function portKill(){
  local pid=$(lsof -Pwni tcp | sed 1d | eval "fzf ${FZF_DEFAULT_OPTS} -m --header='[kill:tcp]'" | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    echo $pid | xargs kill -${1:-9}
    ks
  fi
}

function reload(){
  kitty @ set-colors -a $HOME/.config/kitty/theme.conf
  clear
  source ~/.zshrc
}

fzf-down() {
  fzf --height 50% "$@" --border
}

# fco - checkout git branch/tag
fco() {
  local tags branches target
  tags=$(git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  branches=$(
    git branch --all | grep -v HEAD             |
    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  target=$(
    (echo "$tags"; echo "$branches") | sed '/^$/d' |
    fzf-down --no-hscroll --reverse --ansi +m -d "\t" -n 2 -q "$*") || return
  git checkout $(echo "$target" | awk '{print $2}')
}

fs() {
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf --height 40% --reverse --query="$1" --select-1 --exit-0) &&
  tmux switch-client -t "$session"
}


# GIT heart FZF
# -------------

is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}


# Jumps to project directory, arg can be child of workspace directory
function work(){
  if [[ -n $1 ]]
  then
    WORKDIR="$1"
  else
    WORKDIR="$DATA/workspace"
  fi

  dir=$(ls -d $WORKDIR/* | \
          fzf -m --preview="tree -L 1 -h --du {1}")
  [[ ! -z "$dir" ]] || return
  cd $dir
  [ -d .git ] && return
  work $dir
}


_gf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
  cut -c4- | sed 's/.* -> //'
}

_gb() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -200' |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

_gt() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi --preview-window right:70% \
    --preview 'git show --color=always {} | head -200'
}

_gh() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -200' |
  grep -o "[a-f0-9]\{7,\}"
}

_gr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' |
  cut -d$'\t' -f1
}

_gs() {
  is_in_git_repo || return
  git stash list | fzf-down --reverse -d: --preview 'git show --color=always {1}' |
  cut -d: -f1
}

alias gpn='(git symbolic-ref HEAD 2>/dev/null || echo "(unnamed branch)")|cut -d/ -f3- | xargs -ro git push --set-upstream origin'

alias getpass=~/.scripts/passmenu

## SSH related
authssh(){
  eval "$(ssh-agent -s)" && ssh-add
}

alias kssh="kitty +kitten ssh"

he() {
  local command
  command=$(h -e)
  if [[ -n "$command" ]]; then
    print -z "$command"
  fi
}

alias cssh="ssh -o ProxyCommand='cloudflared access ssh --hostname shivampc.pratikn.com'"
alias kcssh="kitty +kitten ssh -o ProxyCommand='cloudflared access ssh --hostname shivampc.pratikn.com'"

vf() {
  local file
  file=$(fzf --preview 'bat --style=numbers --color=always --line-range :500 {}') && $EDITOR "$file"
}

vgf() {
  git ls-files | fzf | xargs $EDITOR
}

# Fuzzy Run Installed Commands
frun() {
  cmd=$(compgen -c | sort -u | fzf)
  eval "$cmd"
}

# Fuzzy Attach to Tmux Session
ftmux() {
  tmux attach -t $(tmux ls | fzf | cut -d: -f1)
}

# 14. Docker: Exec Into Container
fdocker_exec() {
  local cid=$(docker ps --format '{{.ID}} {{.Image}} {{.Names}}' | fzf | awk '{print $1}')
  [ -n "$cid" ] && docker exec -it "$cid" bash || echo "No container selected"
}

# 15. Docker: Logs From Container
fdocker_logs() {
  local cid=$(docker ps --format '{{.ID}} {{.Image}} {{.Names}}' | fzf | awk '{print $1}')
  [ -n "$cid" ] && docker logs -f "$cid"
}

# 16. Docker: Stop Running Container
fdocker_stop() {
  local cid=$(docker ps --format '{{.ID}} {{.Image}} {{.Names}}' | fzf | awk '{print $1}')
  [ -n "$cid" ] && docker stop "$cid"
}

# 17. Docker Compose: Select & Run Service
fdocker_run() {
  local service=$(docker-compose config --services | fzf)
  [ -n "$service" ] && docker-compose run "$service" sh
}

# 18. Docker Compose: Restart Service
fdocker_restart() {
  local service=$(docker-compose config --services | fzf)
  [ -n "$service" ] && docker-compose restart "$service"
}

alias fde='fdocker_exec'
alias fdl='fdocker_logs'
alias fds='fdocker_stop'
alias fdr='fdocker_run'
alias fdre='fdocker_restart'
alias nv='NVIM_APPNAME=mini-nvim nvim'
alias dps='docker ps'
alias dex='docker exec -it'
alias dl='docker logs -f --tail 200'

alias gc='git commit --verbose'
alias gco='git checkout'
alias ls='ls -G'
alias gcp='git cherry-pick'
alias ga='git add'
alias md='mkdir -p'
alias gp='git push'
alias grep='grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox,.venv,venv}'
alias gl='git pull'
alias gst='git status'
alias glo='git log --oneline --decorate'

# Encrypt 
# encrypt "text to encrypt" "secret"
encrypt() { echo "$1" | openssl enc -aes-256-cbc -a -salt -pbkdf2 -pass pass:"$2"; }

# Decrypt
# decrypt "text to decrypt" "secret"
decrypt() { echo "$1" | openssl enc -aes-256-cbc -a -d -pbkdf2 -pass pass:"$2"; }
